CD = 1411e3; % Cd Uncompressed audio Bit_Rate
MP3 = 128e3; % Mp3 Bit_Rate
Brd = (CD/MP3) % Bit_RateRatio Improvement 1/11 storage
Fs = 44100; % Audio Samppling_Rate CD
N = 16; % Bit_Resolution (BitDepth) = 2^16 = 65536 possible values
Nc = 2; % Number of channels
[Fm] = 20 : 20000; % Hearing Frequency_Range

% communications - based and storage - based applications.
%%
rng default 
% Control random number generation 
Tpulse = 20e-3;

Fs = 10e3;
t = -1:1/Fs:1;
x = rectpuls(t,Tpulse); 
% continuous, aperiodic unity-height rectangular pulse at the sample 
% times indicated in array t, centered about t = 0 and with a default width of 1. 
% Note that the interval of nonzero amplitude is defined to be open on the right, 
% that is, rectpuls(-0.5) = 1 while rectpuls(0.5) = 0.

y = 0.00001*randn(size(x)); 

% produce a predictable sequence of numbers

s = x + y;
pulseSNR = snr(x,s-x) % dBc dB in relation to the carrier

%% Create a sinusoidal signal sampled at 48 kHz. The signal has a fundamental of frequency 1 kHz 

% and unit amplitude. It additionally contains a 2 kHz harmonic with half the 
% amplitude and additive noise with variance 0.1ï¿½.

fs = 48e3;
t = 0:1/fs:1-1/fs;
A = 1.0;
powfund = A^2/2;
a = 0.4;
powharm = a^2/2;
s = 0.1;
varnoise = s^2;
x = A*cos(2*pi*1000*t) + ...
    a*sin(2*pi*2000*t) + s*randn(size(t));
    
%% Verify that SNR, THD, and SINAD agree with their definitions.

SNR = snr(x); % signal-to-noise ratio
defSNR = 10*log10(powfund/varnoise);
SN = [SNR defSNR]

THD = thd(x); % total harmonic distortion 
defTHD = 10*log10(powharm/powfund);
TH = [THD defTHD]

SINAD = sinad(x); % signal to noise and distortion ratio
defSINAD = 10*log10(powfund/(powharm+varnoise));
SI = [SINAD defSINAD]


